syntax = "proto3";

package worker;

// This message is used when the request or response does not send any data.
message EmptyMessage {}

////////////////////////////////////////////////////////////////////////////////

// The WorkerService is implemented by the Master to allow workers to register with the Cluster and
// update the status of completed map and reduce tasks.
service WorkerService {
    // Registers the worker with the cluster so the worker can start recieving map and reduce
    // operations.
    rpc RegisterWorker (RegisterWorkerRequest) returns (RegisterWorkerResponse);

    // Used by the worker to update it's status on the master. This request will be used regularly
    // so the master knows that the worker is still alive.
    rpc UpdateWorkerStatus (UpdateStatusRequest) returns (EmptyMessage);

    // Used by the worker to return the result of a Map operation.
    rpc ReturnMapResult (MapResult) returns (EmptyMessage);

    // Used by the worker to return the result of a Reduce operation.
    rpc ReturnReduceResult (ReduceResult) returns (EmptyMessage);
}

message RegisterWorkerRequest {
    // The workers ip and port where its MRWorkerService is exposed.
    string worker_address = 1;
    // Optional worker id, allows the worker to attempt to register with it's old worker id.
    string worker_id = 2;
}

message RegisterWorkerResponse {
  // The id for this worker to be used in future requests.
  string worker_id = 1;
}

enum WorkerStatus {
    AVAILABLE = 0;
    BUSY = 1;
};

enum OperationStatus {
    UNKNOWN = 0;
    IN_PROGRESS = 1;
    COMPLETE = 2;
    FAILED = 3;
    CANCELLED = 4;
};

message UpdateStatusRequest {
    WorkerStatus worker_status = 1;
    // The status of the last assigned operation. This field will be UNKNOWN if there is no
    // assigned operation.
    OperationStatus operation_status = 2;

    string worker_id = 3;
}

enum ResultStatus {
    SUCCESS = 0;
    FAILURE = 1;
};

message MapResult {
    ResultStatus status = 1;
    // The mapping of result partitions to output files if the operation is a success.
    map<uint64, string> map_results = 2;

    string worker_id = 3;
    // Total CPU time used for running the map operation
    uint64 cpu_time = 4;
    // Details on the error if the status is failure
    string failure_details = 5;
    string task_id = 6;
}

message ReduceResult {
    ResultStatus status = 1;

    string worker_id = 2;
    // Total time spend on the running the reduce operation
    uint64 cpu_time = 3;
    // Details on the error if the status is failure
    string failure_details = 4;
    string task_id = 5;
}

// ScheduleOperationService is used by the master to schedule Map and Reduce operations on the
// worker.
service ScheduleOperationService {
    // Tells a worker to start a map operation with a certain set of data. An error will be
    // returned if the operation is not valid or the worker is busy.
    rpc PerformMap (PerformMapRequest) returns (EmptyMessage);

    // Tells a worker to start a reduce operation for a certain partition of the map output.
    // An error will be returned if the operation is not valid or the worker is busy.
    rpc PerformReduce (PerformReduceRequest) returns (EmptyMessage);

    // Used by the master to tell a worker to stop working on it's current task.
    rpc CancelTask (CancelTaskRequest) returns (EmptyMessage);
}

// Message specifying where one part of the input for a map task is located.
message InputLocation {
    // Location of the input file on an accessible filesystem.
    string input_path = 1;

    // The index of the first byte to read from the file.
    uint64 start_byte = 2;

    // The index of the last byte to read from the file.
    uint64 end_byte = 3;
}

// Message specifying the input for given a map request.
message MapTaskInput {
    // An array of InputLocations which make up the Input for this Map Task.
    repeated InputLocation input_locations = 1;
}

message PerformMapRequest {
    // Message specifying the input for this map request.
    MapTaskInput input = 1;
    // The path to the binary that performs the map operation.
    string mapper_file_path = 2;
    string task_id = 3;
}

message PerformReduceRequest {
    // The intermediate partition to be reduced.
    uint64 partition = 1;
    // The file paths of the intermediate files produced by the map operations in
    // the form: "address:port/path"
    repeated string input_file_paths = 2;
    // The path to the binary that performs the reduce operation.
    string reducer_file_path = 3;
    // The path to the output directory.
    string output_directory = 4;
    string task_id = 5;
}

message CancelTaskRequest {
    // The id of the task the worker should cancel.
    string task_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

// IntermediateDataService allows reduce worker to get intemediate data from workers.
service IntermediateDataService {
  rpc GetIntermediateData (IntermediateDataRequest) returns (IntermediateData);
}

message IntermediateDataRequest {
  string path = 1;
}

message IntermediateData {
  bytes data = 1;
}
