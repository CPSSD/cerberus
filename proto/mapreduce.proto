syntax = "proto3";

package mapreduce;

// Map reduce service is responsible for scheduling jobs on the cluster
// and getting information about the running jobs.
service MapReduceService {
    // Schedules a map reduce. Returns various gRPC error codes if the
    // operation failed before even starting.
    rpc PerformMapReduce (MapReduceRequest) returns (MapReduceResponse);

    // Gets the status of the map reduce.
    rpc MapReduceStatus (MapReduceStatusRequest) returns (MapReduceStatusResponse);

    // Attempts to cancel a running or scheduled map reduce.
    rpc CancelMapReduce (MapReduceCancelRequest) returns (MapReduceCancelResponse);

    // Cluster Status checks.
    rpc ClusterStatus (EmptyMessage) returns (ClusterStatusResponse);
}

// Empty message where there is nothing to be send or replied with.
message EmptyMessage {}

message MapReduceRequest {
    string binary_path = 1;

    // Location of the input data on an accessible filesystem.
    string input_directory = 2;

    // Location of the output directory on an accessible filesystem.
    // Will be automatically generated if it is not included.
    string output_directory = 3;

    // ID of the client. Generated to be used for easier recognising who is
    // making the request. Generated on a single machine for now
    string client_id = 4;

    // Priority of the MapReduce
    uint32 priority = 5;
}

// Response from the master about the map reduce.
message MapReduceResponse {
    string mapreduce_id = 1;
}

message MapReduceStatusRequest {
    // ID of the client. This is used to filter the responses from the master
    // to only show map reduces scheduled by the client itself.
    // THIS IS NOT AUTHENTICATION
    string client_id = 1;

    // Optionally instead of the client_id the specific ID of the map reduce
    // can be given to get its status.
    string mapreduce_id = 2;
}

// Response with the status of the requested map reduce.
message MapReduceStatusResponse {
    repeated MapReduceReport reports = 1;
}

enum Status {
    UNKNOWN = 0;
    DONE = 1;
    IN_PROGRESS = 2;
    IN_QUEUE = 3;
    FAILED = 4;
    CANCELLED = 5;
};

message MapReduceReport {
    string mapreduce_id = 1;
    Status status = 2;
    int64 queue_length = 3;
    // Unix timestamp at which the MapReduce has been scheduled.
    int64 scheduled_timestamp = 4;
    // Unix timestamp at which the MapReduce has been started.
    int64 started_timestamp = 5;
    // Unix timestamp at which the MapReduce has been finished.
    int64 done_timestamp = 6;
    // Location of the output directory
    string output_directory = 7;
    // Details accompanying a failed job.
    string failure_details = 8;
}

message ClusterStatusResponse {
    // Amount of workers in the cluster.
    int64 workers = 1;
    int64 queue_size = 2;
}

message MapReduceCancelRequest {
    // ID of the client.
    string client_id = 1;
    // ID of the map reduce to cancel. If this is not provided then the most recently
    // scheduled MapReduce for the given client will be cancelled.
    string mapreduce_id = 2;
}

message MapReduceCancelResponse {
    // ID of the canceled map reduce
    string mapreduce_id = 1;
    bool success = 2;
}
