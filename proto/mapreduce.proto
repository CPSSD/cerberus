syntax = "proto3";

package mapreduce;

// Map reduce service is responsible for scheduling jobs on the cluster
// and getting information about the running jobs
service MapReduceService {

    // Map Reduce operations

    // Runs the map reduce. Returns various gRPC error codes if the operation
    // failed before even starting
    // TODO: Decide do we want to return more information about scheduled
    //       request.
    rpc PerformMapReduce (MapReduceRequest) returns (MapReduceResponse);

    // Gets the status of the map reduce
    rpc MapReduceStatus (MapReduceStatusRequest) returns (MapReduceStatusResponse);

    // Cluster health

    // Cluster Status checks
    rpc ClusterHealth (EmptyMessage) returns (ClusterHealthResponse);
}

// Empty message where there is nothing to be send or replied with
message EmptyMessage {}

message MapReduceRequest {
    // TODO: Rename/Remove this field once we actually send a library.
    string binary_location = 1;

    // Location of the input data on an accessible filesystem
    string input_location = 2;

    // ID of the client. Generated to be used for easier recognising who is
    // making the request. Generated on a single machine for now
    // TODO: Convert to unique identity once we have authentication.
    string client_id = 3;
}

// Response from the master about the map reduce
message MapReduceResponse {
    string mapreduce_id = 1;
}

message MapReduceStatusRequest {
    // ID of the client. This is used to filter the responses from the master
    // to only show map reduces scheduled by the client itself.
    // THIS IS NOT AUTHENTICATION
    string client_id = 1;

    // Optionally instead of the client_id the specific ID of the map reduce
    // can be given to get its status.
    // TODO: Add restrictions on the type of data that is returned if the
    //       client performing the MapReduce is not the same as the client
    //       requesting the status
    string mapreduce_id = 2;
}

// Response of
message MapReduceStatusResponse {
    // TODO: Consider taking this message out
    message MapReduceReport {
        enum Status {
            UNKNOWN = 0;
            DONE = 1;
            IN_PROGRESS = 2;
            IN_QUEUE = 3;
        };

        string mapreduce_id = 1;
        Status status = 2;
        int64 queue_length = 3;
        // Unix timestamp at which the MapReduce has been scheduled.
        int64 started_timestamp = 4;
    }

    repeated MapReduceReport reports = 1;
}

message ClusterHealthResponse {
    // Amount of workers in the cluster
    int64 workers = 1;
}
